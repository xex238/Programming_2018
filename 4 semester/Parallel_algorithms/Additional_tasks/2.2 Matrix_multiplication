using System;
using System.Threading;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.IO;
using System.Globalization;
using System.Diagnostics;

namespace Matrix_multiplication
{
    class Program
    {
        public static double[,] Multiplication_with_Tasks(Tuple<double[,], int, int, int> tuple)
        {
            double[,] x1 = tuple.Item1;
            int length = tuple.Item2;
            int i_begin = tuple.Item3;
            int i_end = tuple.Item4;

            double[,] new_mas = new double[i_end - i_begin, length];

            for (int i = i_begin; i < i_end; i++)
            {
                for (int j = 0; j < length; j++)
                {
                    for (int k = 0; k < length; k++)
                    {
                        new_mas[i - i_begin, j] = new_mas[i - i_begin, j] + x1[i, k] * x1[k, j];
                    }
                }
            }

            return new_mas;
        }
        public static void Task_x(double[,] matrix, int lines_Length, int count_of_tasks)
        {
            Task<double[,]>[] task = new Task<double[,]>[count_of_tasks];
            Tuple<double[,], int, int, int>[] tuple = new Tuple<double[,], int, int, int>[count_of_tasks];
            double[,] result_matrix = new double[1000, 1000];

            Stopwatch st = new Stopwatch();
            st.Start();

            for (int i = 0; i < count_of_tasks; i++)
            {
                tuple[i] = new Tuple<double[,], int, int, int>(matrix, lines_Length, i * (int)(1000 / count_of_tasks), i * (int)(1000 / count_of_tasks) + count_of_tasks);
                task[i] = new Task<double[,]>(x => Multiplication_with_Tasks((Tuple<double[,], int, int, int>)x), tuple[i]);
                task[i].Start();
            }

            for (int j = 0; j < (1000 / count_of_tasks); j++)
            {
                for (int k = 0; k < count_of_tasks; k++)
                {
                    for (int i = 0; i < 1000; i++)
                    {
                        result_matrix[j * 5 + k, i] = task[j].Result[k, i];
                    }
                }
            }

            Console.WriteLine("Execution time of the program with 200 tasks computing: {0}", st.Elapsed.TotalSeconds);

            Console.WriteLine("first string of the program");
            for (int j = 0; j < 1000; j++)
            {
                Console.WriteLine("{0},", result_matrix[j, 0]);
            }
        }
        public static void Task_1000(double[,] matrix, int lines_Length)
        {
            // Проверка времени выполнения на task = 1000
            Task<double[,]>[] task_1 = new Task<double[,]>[1000];
            Tuple<double[,], int, int, int>[] tuple = new Tuple<double[,], int, int, int>[1000];
            double[,] result_matrix = new double[1000, 1000];

            Stopwatch st_1 = new Stopwatch();
            st_1.Start();

            for (int i = 0; i < 1000; i++)
            {
                tuple[i] = new Tuple<double[,], int, int, int>(matrix, lines_Length, i, i + 1);
                task_1[i] = new Task<double[,]>(x => Multiplication_with_Tasks((Tuple<double[,], int, int, int>)x), tuple[i]);
                task_1[i].Start();
            }

            for (int i = 0; i < 1000; i++)
            {
                for (int j = 0; j < 1000; j++)
                {
                    result_matrix[i, j] = task_1[i].Result[0, j];
                }
            }

            Console.WriteLine("Execution time of the program with 1000 tasks computing: {0}", st_1.Elapsed.TotalSeconds);

            //string result_string = "";
            //for (int i=0; i<length; i++)
            //{
            //    for (int j=0; j<length; j++)
            //    {
            //        result_string = result_string + new_mas[i, j].ToString() + ",";
            //    }
            //}

            //File.WriteAllText("result.csv", result_string);

            Console.WriteLine("first string of the program");
            for (int j = 0; j < 1000; j++)
            {
                Console.WriteLine("{0},", result_matrix[j, 0]);
            }
        }
        public static void Task_200(double[,] matrix, int lines_Length)
        {
            Task<double[,]>[] task_2 = new Task<double[,]>[200];
            Tuple<double[,], int, int, int>[] tuple = new Tuple<double[,], int, int, int>[200];
            double[,] result_matrix = new double[1000, 1000];

            Stopwatch st_2 = new Stopwatch();
            st_2.Start();

            for (int i = 0; i < 200; i++)
            {
                tuple[i] = new Tuple<double[,], int, int, int>(matrix, lines_Length, i * 5, i * 5 + 5);
                task_2[i] = new Task<double[,]>(x => Multiplication_with_Tasks((Tuple<double[,], int, int, int>)x), tuple[i]);
                task_2[i].Start();
            }

            for (int j = 0; j < 200; j++)
            {
                for (int k = 0; k < 5; k++)
                {
                    for (int i = 0; i < 1000; i++)
                    {
                        result_matrix[j * 5 + k, i] = task_2[j].Result[k, i];
                    }
                }
            }

            //for (int i = 0; i < 1000; i++)
            //{
            //    for (int j = 0; j < 200; j++)
            //    {
            //        for (int k = 0; k < 5; k++)
            //        {
            //            result_matrix[i, j * 5 + k] = task_2[j].Result[k, j * 5 + k];
            //        }
            //    }
            //}

            Console.WriteLine("Execution time of the program with 200 tasks computing: {0}", st_2.Elapsed.TotalSeconds);

            Console.WriteLine("first string of the program");
            for (int j = 0; j < 1000; j++)
            {
                Console.WriteLine("{0},", result_matrix[j, 0]);
            }
        }
        public static void Task_40(double[,] matrix, int lines_Length)
        {
            Task<double[,]>[] task_2 = new Task<double[,]>[40];
            Tuple<double[,], int, int, int>[] tuple = new Tuple<double[,], int, int, int>[40];
            double[,] result_matrix = new double[1000, 1000];

            Stopwatch st_2 = new Stopwatch();
            st_2.Start();

            for (int i = 0; i < 40; i++)
            {
                tuple[i] = new Tuple<double[,], int, int, int>(matrix, lines_Length, i * 25, i * 25 + 25);
                task_2[i] = new Task<double[,]>(x => Multiplication_with_Tasks((Tuple<double[,], int, int, int>)x), tuple[i]);
                task_2[i].Start();
            }

            for (int j = 0; j < 40; j++)
            {
                for (int k = 0; k < 25; k++)
                {
                    for (int i = 0; i < 1000; i++)
                    {
                        result_matrix[j * 25 + k, i] = task_2[j].Result[k, i];
                    }
                }
            }

            Console.WriteLine("Execution time of the program with 200 tasks computing: {0}", st_2.Elapsed.TotalSeconds);

            Console.WriteLine("first string of the program");
            for (int j = 0; j < 1000; j++)
            {
                Console.WriteLine("{0},", result_matrix[j, 0]);
            }
        }
        static void Main(string[] args)
        {
            Thread.CurrentThread.CurrentCulture = CultureInfo.CreateSpecificCulture("en");
            var lines = File.ReadAllLines("matrix.csv");
            double[,] matrix = new double[lines.Length, lines.Length];
            int i = 0;
            foreach (string line in lines)
            {
                string[] line_s = line.Split(',');
                int j = 0;
                foreach (string str in line_s)
                {
                    matrix[i, j] = Double.Parse(str, CultureInfo.InvariantCulture);
                    ++j;
                }
                ++i;
            }

            Task_1000(matrix, lines.Length);
            Task_200(matrix, lines.Length);
            Task_40(matrix, lines.Length);

            //Console.ReadKey();
        }
    }
}
