#include <iostream>
#include <vector>
using namespace std;

struct DSU {
  vector <int> parent;
  DSU (int size) {
    parent.resize(size, -1);
  }
  void hang(int v, int p){
    parent[v] = p;
  }
  void print(){
    for(int i = 0; i < parent.size(); ++i){
      if(parent[i] != -1)
        cout << i << " -> " << parent[i]<< endl;
      else
        cout << i << endl;
    }
  }
  int find(int v) {
    int r = v;
    while(parent[r] != -1)
      r = parent[r];
    while(parent[v] != -1)
    {
      int tmp = v;
      v = parent[v];
      parent[v] = r;
    }
    return r;
  }
};

int main() {
  int N = 0, M = 0, count = 0;
  cin >> N >> M;
  DSU dsu(N + 1);
  for(int i = 0; i < M; i++){
    int x = 0, y = 0;
    cin >> x >> y;
    if(dsu.find(x) != dsu.find(y)){
      dsu.hang(x, y);
      N--;
    }
    if (N == 0) break;
    count++;
  }
  cout << count << endl;
  dsu.print();
  return 0;
}
