#include <iostream>
#include <string>
using namespace std;

class Spanning_tree
{
public:
	Spanning_tree();
	void Set_size(const int& edge, const int& vertex);
	void Set_edge(const int& first_vertex, const int& second_vertex, const int& weight);
	void Sort_on_weight();
	void Do_new_three();

	void RESET(const int& x);
	void JOIN(const int& j, const int& k);
	bool CHECK(const int& j, const int& k);

	int Find(const int& x);

private:
	int **old_mas;
	int length_old_mas{ 0 };
	int current{ 0 };
	int count_of_edge{ 0 };
	int count_of_vertex{ 0 };

	int* new_mas;
};

Spanning_tree::Spanning_tree()
{
	old_mas = new int*[3];
}

void Spanning_tree::Set_size(const int& edge, const int& vertex)
{
	for (int i = 0; i < 3; i++)
	{
		old_mas[i] = new int[edge];
	}
	length_old_mas = edge;

	count_of_edge = edge;
	count_of_vertex = vertex;
}

void Spanning_tree::Set_edge(const int& first_vertex, const int& second_vertex, const int& weight)
{
	old_mas[0][current] = first_vertex; // Первая вершина
	old_mas[1][current] = second_vertex; // Вторая вершина
	old_mas[2][current] = weight; // Вес ребра
	current++;
}

void Spanning_tree::Sort_on_weight()
{
	int min{ old_mas[2][0] };
	int number_of_min_element{ 0 };
	int additional_var{ 0 };
	for (int i = 0; i < length_old_mas; i++)
	{
		min = old_mas[2][i];
		number_of_min_element = i;
		for (int j = i; j < length_old_mas; j++)
		{
			if (old_mas[2][j] < min)
			{
				min = old_mas[2][j];
				number_of_min_element = j;
			}
		}
		for (int j = 0; j < 3; j++)
		{
			additional_var = old_mas[j][i];
			old_mas[j][i] = old_mas[j][number_of_min_element];
			old_mas[j][number_of_min_element] = additional_var;
		}
	}
}

void Spanning_tree::Do_new_three()
{
	RESET(count_of_vertex);
	int result_weight{ 0 };
	int current_count_of_join_edge{ 0 };

	for (int i = 0; i < count_of_vertex; i++)
	{
		if (!CHECK(old_mas[0][i] - 1, old_mas[1][i] - 1))
		{
			JOIN(old_mas[0][i] - 1, old_mas[1][i] - 1);
			result_weight = result_weight + old_mas[2][i];
			current_count_of_join_edge++;
		}
		if (current_count_of_join_edge + 1 == count_of_vertex)
		{
			break;
		}
	}

	cout << result_weight << endl;
}

void Spanning_tree::RESET(const int& n)
{
	new_mas = new int[n];
	for (int i = 0; i < n; i++)
	{
		new_mas[i] = i;
	}
}

void Spanning_tree::JOIN(const int& j, const int& k)
{
	int jj = Find(j);
	int kk = Find(k);
	if (jj != kk)
	{
		new_mas[jj] = kk;
	}
}

bool Spanning_tree::CHECK(const int& j, const int& k)
{
	if (Find(j) == Find(k))
	{
		return true;
	}
	return false;
}

int Spanning_tree::Find(const int& x)
{
	if (new_mas[x] == x)
	{
		return x;
	}
	return new_mas[x] = Find(new_mas[x]);
}

int main()
{
	Spanning_tree st = Spanning_tree();

	int vertex_1{ 0 };
	int vertex_2{ 0 };
	int weight{ 0 };
	int vertex{ 0 };
	int edge{ 0 };

	cin >> vertex;
	cin >> edge;

	st.Set_size(edge, vertex);

	for (int i = 0; i < edge; i++)
	{
		cin >> vertex_1 >> vertex_2 >> weight;
		st.Set_edge(vertex_1, vertex_2, weight);
	}

	st.Sort_on_weight();
	st.Do_new_three();
}
